import time
import random
import os
import logging
import requests
import json
from getpass import getpass
from instagrapi import Client
from instagrapi.exceptions import LoginRequired, TwoFactorRequired

logging.basicConfig(filename='bot.log', level=logging.ERROR)


athkar = [
    "سبحان الله وبحمده",
    "لا إله إلا الله وحده لا شريك له، له الملك وله الحمد وهو على كل شيء قدير",
    "أستغفر الله العظيم الذي لا إله إلا هو الحي القيوم وأتوب إليه",
    "اللهم صل وسلم على نبينا محمد",
    "حسبي الله ونعم الوكيل",
    "لا حول ولا قوة إلا بالله",
    "اللهم إني أسألك علماً نافعاً، ورزقاً طيباً، وعملاً متقبلاً",
    "اللهم إني أعوذ بك من الهم والحزن، والعجز والكسل، والجبن والبخل، وضلع الدين وغلبة الرجال",
    "اللهم إني أعوذ بك من شر ما عملت، ومن شر ما لم أعمل",
    "اللهم إني أعوذ بك من الفقر، والقلة والذلة، وأعوذ بك من أن أَظلِم أو أُظلَم",
    "اللهم إني أعوذ بك من عذاب القبر، ومن عذاب النار، ومن فتنة المحيا والممات، ومن فتنة المسيح الدجال",
    "اللهم إني أعوذ بك من جهد البلاء، ودرك الشقاء، وسوء القضاء، وشماتة الأعداء",
    "اللهم إني أعوذ بك من زوال نعمتك، وتحول عافيتك، وفجاءة نقمتك، وجميع سخطك",
    "اللهم إني أعوذ بك من البرص والجنون والجذام، ومن سيء الأسقام",
    "اللهم إني أعوذ بك من الكسل والهرم والمأثم والمغرم",
]

client = Client()
sent_benefits = []
sent_groups = set()
SETTINGS_FILE = "settings.json"

def load_settings():
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, "r", encoding="utf-8") as file:
                return json.load(file)
        except Exception as e:
            logging.error(f"Failed to load settings: {e}")
            return {}
    return {}

def save_settings(settings):
    try:
        with open(SETTINGS_FILE, "w", encoding="utf-8") as file:
            json.dump(settings, file)
    except Exception as e:
        logging.error(f"Failed to save settings: {e}")

def login():
    print("=== Logging into Instagram ===")
    if os.path.exists('session.json'):
        try:
            client.load_settings('session.json')
            print("Session loaded successfully from session.json!")
            return True
        except Exception as e:
            logging.error(f"Failed to load session from session.json: {e}")
            print(f"Failed to load session from session.json: {e}")
            return manual_login()
    else:
        print("Session file not found, proceeding with manual login.")
        return manual_login()

def manual_login():
    username = input("Username: ")
    password = getpass("Password: ")
    if not username or not password:
        print("Error: Please enter both username and password.")
        return False
    try:
        client.login(username, password)
        client.dump_settings('session.json')
        print("Logged in successfully!")
        return True
    except TwoFactorRequired:
        verification_code = input("Enter two-factor verification code: ")
        try:
            client.two_factor_login(verification_code)
            client.dump_settings('session.json')
            print("Logged in successfully with two-factor authentication!")
            return True
        except Exception as e:
            logging.error(f"Failed to log in with two-factor authentication: {e}")
            print(f"Failed to log in with two-factor authentication: {e}")
            return False
    except Exception as e:
        logging.error(f"Login failed: {e}")
        print(f"Login failed: {e}")
        return False

def fetch_hadith():
    try:
        url = "https://raw.githubusercontent.com/mhashim6/Open-Hadith-Data/refs/heads/master/Sunan_Ibn-Maja/sunan_ibn-maja_ahadith.utf8.csv"
        response = requests.get(url)
        if response.status_code != 200:
            return "Failed to fetch hadiths from the website."
        data = response.text
        hadiths = []
        start = 0
        while True:
            start_idx = data.find("حدثنا", start)
            if start_idx == -1:
                break
            end_idx = data.find('"', start_idx)
            if end_idx == -1:
                break
            hadith = data[start_idx:end_idx].strip()
            if hadith:
                hadiths.append(hadith)
            start = end_idx + 1
        print("First 3 hadiths from the data:")
        for i, hadith in enumerate(hadiths[:3]):
            print(f"Hadith {i+1}: {hadith}")
        if hadiths:
            return random.choice(hadiths)
        else:
            return "No hadiths found in the data."
    except Exception as e:
        logging.error(f"Error fetching hadith: {e}")
        return "Error fetching hadith."

def fetch_benefit():
    try:
        benefit = fetch_hadith()
        if benefit and benefit not in sent_benefits:
            sent_benefits.append(benefit)
            return benefit
        else:
            if sent_benefits:
                return random.choice(sent_benefits)
            else:
                return "No new hadith found."
    except Exception as e:
        logging.error(f"Error fetching benefit: {e}")
        return "Error fetching benefit."

def send_athkar(group_threads):
    random_thikr = random.choice(athkar)
    for thread_id in group_threads:
        retries = 3  # Number of retries
        for attempt in range(retries):
            try:
                client.direct_send(random_thikr, thread_ids=[thread_id])
                print(f"Sent thikr to group {thread_id}: {random_thikr}")
                time.sleep(random.randint(20, 30))  # Delay between messages
                break  # Exit loop if successful
            except Exception as e:
                logging.error(f"Error sending thikr to group {thread_id}: {e}")
                print(f"Error sending thikr to group {thread_id}: {e}")
                if attempt < retries - 1:  # If not the last attempt
                    time.sleep(60)  # Wait 60 seconds before retrying
                else:
                    print(f"Failed to send thikr to group {thread_id} after {retries} attempts.")

def send_benefit(group_threads):
    benefit = fetch_benefit()
    for thread_id in group_threads:
        retries = 3  # Number of retries
        for attempt in range(retries):
            try:
                client.direct_send(benefit, thread_ids=[thread_id])
                print(f"Sent benefit to group {thread_id}: {benefit}")
                time.sleep(random.randint(20, 30))  # Delay between messages
                break  # Exit loop if successful
            except Exception as e:
                logging.error(f"Error sending benefit to group {thread_id}: {e}")
                print(f"Error sending benefit to group {thread_id}: {e}")
                if attempt < retries - 1:  # If not the last attempt
                    time.sleep(60)  # Wait 60 seconds before retrying
                else:
                    print(f"Failed to send benefit to group {thread_id} after {retries} attempts.")

def start_bot():
    group_threads = set()

    def get_active_threads():
        try:
            threads = client.direct_threads()
            active_threads = set(thread.id for thread in threads if thread.is_group)
            return active_threads
        except LoginRequired:
            logging.error("Logged out, re-login required.")
            print("Logged out, re-login required.")
            if not login():
                return set()
            else:
                return get_active_threads()
        except Exception as e:
            logging.error(f"Error fetching groups: {e}")
            print(f"Error fetching groups: {e}")
            return set()

    group_threads = get_active_threads()
    send_athkar(group_threads)
    send_benefit(group_threads)

    last_athkar_time = time.time()
    last_benefit_time = time.time()
    while True:
        try:
            active_threads = get_active_threads()
            new_groups = active_threads - group_threads
            if new_groups:
                print(f"New groups detected: {new_groups}")
                send_athkar(new_groups)
                send_benefit(new_groups)
                group_threads.update(new_groups)
            current_time = time.time()
            if current_time - last_athkar_time >= 60 * 60:  # Every hour
                send_athkar(group_threads)
                last_athkar_time = current_time
            if current_time - last_benefit_time >= 2 * 60 * 60:  # Every 2 hours
                send_benefit(group_threads)
                last_benefit_time = current_time
            print(f"Waiting for an hour before the next send... Current time: {time.ctime()}")
            time.sleep(60 * 60)  # Wait for one hour
        except LoginRequired:
            logging.error("Logged out, re-login required.")
            print("Logged out, re-login required.")
            if not login():
                break
        except Exception as e:
            logging.error(f"Unexpected error: {e}")
            print(f"Unexpected error: {e}")

if __name__ == "__main__":
    settings = load_settings()
    if login():
        start_bot()
